<?php

$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

$uri = urldecode($uri);

$paths = require __DIR__.'/bootstrap/paths.php';

$requested = $paths['public'].$uri;

// This file allows us to emulate Apache's "mod_rewrite" functionality from the
// built-in PHP web server. This provides a convenient way to test a Laravel
// application without having installed a "real" web server software here.
if ($uri !== '/' and file_exists($requested))
{
	return false;
}

require_once $paths['public'].'/index.php';
#installing necessary packages
install.packages("arules")
install.packages("arulesViz")
install.packages("dataset")
install.packages("Groceries")

str(Groceries)
summary(Groceries)

#importing
library(arules)
library(arulesViz)
library(dataset)

#taking csv file
groceries<-read.transactions("groceries.csv", sep=",")
setwd("D:/Shimla/archive/groceries.csv")

#taking csv to a variable
orders<-read.csv("D:/Shimla/archive/groceries.csv")

#output the orders
head(orders)

inspect(orders)
orders

#to choose different file
read.transactions(file.choose())
?apriori

#default rules
gr_rules<-apriori(orders) #default confidence = 0.8 sypport=0.1 

#changing support and confidence
gr_rules<-apriori(orders, parameter=list(supp=0.01, conf=0.8)) #68 rules written 

#first five 
inspect(gr_rules[1:5])
inspect(gr_rules[1:10])

#sorting by decreasing order of support and lift
gr_rules_sup<-sort(gr_rules, by = "support", decreasing=T)
gr_rules_lift<-sort(gr_rules, by = "lift", decreasing=T)
inspect(gr_rules_sup[1:10])
inspect(gr_rules_lift[1:10])

?is.redundant
gr_rules #68 rules

#remove the redundancy
redundant_rules<-is.redundant(gr_rules)
redundant_rules

summary(redundant_rules)#False: 25 True:43

gr_rules<-gr_rules[!redundant_rules] #redundancy removed
gr_rules
inspect(gr_rules[1:5])

#making rules according to the requirements for magenine
gr_rules_beer<-apriori(orders,parameter = list(supp= .01, conf=.8),appearance=list(default="rhs", lhs="margarine="))
inspect(gr_rules_beer)

#plotting 
plot(gr_rules, method="graph")
plot(gr_rules, method="graph", interactive=T)

#if you want another variable to be on left
lhs<-readline()
val<-1
while(val=1)
{
	lhs<-readline()
	gr_rules_beer<-apriori(orders,parameter = list(supp= .01, conf=.8),appearance=list(default="rhs", lhs="margarine="))
	inspect(gr_rules_beer)

	#plotting 
	plot(gr_rules, method="graph")
	plot(gr_rules, method="graph", interactive=T)
	val<-readline()
	val<-as.integer(val)
}
	
	



